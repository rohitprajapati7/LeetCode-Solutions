class Solution {
    static int idx = 0;
    TreeNode constructTree(int preorder[], int inorder[], int start, int end)
    {
        if(start > end){
            return null;
        }
        int curr = preorder[idx];
        idx++;
        TreeNode node = new TreeNode(curr);
        
        if(start == end){
            return node;
        }
        
        int pos = search(inorder, start, end, curr);
        node.left = constructTree(preorder, inorder, start, pos-1);
        node.right = constructTree(preorder, inorder, pos+1, end);
        
        return node;
    }
    public int search(int inorder[], int start, int end, int val)
    {
        for(int i = start; i <= end; i++)
        {
            if(inorder[i] == val){
                return i;
            }
        }
        return -1;
    }
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int start = 0;
        int end = preorder.length-1;
        TreeNode root = constructTree(preorder, inorder, start, end);
        
        return root;
    }
}
